---
title: "The Effects of Monetary Policy Shocks on Stock Price Volatility: Evidence from the Australian Economy"
author: "Inhye Kang"

execute:
  echo: false
  
bibliography: references.bib
csl: apa.csl
---

> **Abstract.** This research project aims to measure the effects of monetary policy shocks on stock price volatility using the Bayesian Structural Vector Autoregressive Model (BSVAR) in the Australian economy from 1990 to 2023.
>
> **Keywords.** Monetary policy shocks, Stock prices, Stock price volatility, Structural VARs, Impulse response

# Introduction

This research project aims to measure the effects of monetary policy shocks on stock price volatility using a Bayesian Structural Vector Autoregressive Model (BSVAR) in the Australian economy from 1990 to 2023. The question addressed in this study is: How does an increase in the cash rate target affect stock price volatility in the Australian market?

The behaviour and decisions of stakeholders--including investors, businesses, and financial institutions--in financial markets are primarily affected by stock price volatility. As such, the effect of change in stock prices plays a large role in Australian economy. This study aims to measure the monetary policy shocks on stock price volatility using the Bayesian Structural Vector Autoregression (BSVAR) model, focusing on the Australian economy.

# Data

The study includes data from the Reserve Bank of Australia (RBA), the Australian Bureau of Statistics (ABS), and Yahoo Finance from 1990 to 2023, adjusted quarterly from 1990 Q1 to 2023 Q4, including 136 observations. The variables selected for our analysis include:

|    **GDP (GDP)**: real GDP, expressed as per billion AUD
|    **Interest rates (ICR)**: cash rate target, expressed as a percentage
|    **Consumer price index (CPI)**: All groups Consumer Price Index, expressed as an index number
|    **Exchange rates (EXR)**: exchange rates from AUD to USD, expressed in USD
|    **Stock prices (STP)**: stock prices using the adjusted closing price of the All Ordinaries Index, expressed in AUD
|    **Stock price volatility (VOL)**: the log of bipower variation calculated using the log of the sum of the  
|    multiplication of consecutive absolute logarithmic returns of stock prices (STP) multiplied by normalisation
|    factor $\frac{\pi}{2}$ where $log(\frac{\pi}{2} \sum_{t=2}^{T} |r_{t}| \cdot |r_{t-1}|)$

[<span style="color: #696969;">Table 1](#table1-data-source) shows the details of the data source.
```{r}
source <- data.frame(
  c('GDP', 'Interest rates', 'Consumer Price Index', 'Exchange rates', 'Stock prices'),  
  c('GGDPCVGDP', 'FIRMMCRTD', 'A2325846C', 'FXRUSD', '^AORD'),
  c('RBA', 'RBA', 'ABS', 'RBA', 'Yahoo Finance'),
  stringsAsFactors = FALSE  
)
colnames(source) <- c("Variable", "Code", "Data source")

knitr::kable(source, format = "html")
```
<div id="table1-data-source" style="text-align: center; color: #696969;">
###### Table 1: Data source
</div>

```{r}
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(fig.align = "center")
```

```{r download the variables}

# Download seasonally adjusted quarterly Real GDP ($ million AUD)

gdp_download <- readrba::read_rba(series_id = "GGDPCVGDP")   # Real GDP
gdp_tmp <- xts::xts(gdp_download$value, gdp_download$date)
gdp_tmp <- window(gdp_tmp, start = as.Date("1990-01-01"), end = as.Date("2023-12-31"))
gdp_tmp <- gdp_tmp / 1000   # Real GDP ($ billion AUD)

# Download daily averaged interest rates in percentage (%)

icr_download <- readrba::read_rba(series_id = "FIRMMCRTD")   # Cash rate target (%)
icr_tmp <- xts::xts(icr_download$value, icr_download$date)
icr_tmp <- window(icr_tmp, start = as.Date("1990-01-01"), end = as.Date("2023-12-31"))

# Download quarterly Consumer Price Index

cpi_download = readabs::read_abs(series_id = "A2325846C")   # CPI
cpi_tmp = xts::xts(cpi_download$value, cpi_download$date)
cpi_tmp = window(cpi_tmp, start = as.Date("1990-01-01"), end = as.Date("2023-12-31"))

# Download daily exchange rates (AUD/USD Exchange Rates) in USD

exr_download <- readrba::read_rba(series_id = "FXRUSD")   # Exchange rates of 1 AUD to USD
exr_tmp <- xts::xts(exr_download$value, exr_download$date)
exr_tmp <- window(exr_tmp, start = as.Date("1990-01-01"), end = as.Date("2023-12-31"))

# Download daily stock prices (^AORD) in AUD

stp_download <- tidyquant::tq_get("^AORD", from = "1990-01-01", to = "2023-12-31")   # Stock price (AUD)
stp_tmp <- xts::xts(stp_download$adjusted, stp_download$date)
stp_tmp <- window(stp_tmp, start = as.Date("1990-01-01"), end = as.Date("2023-12-31"))

# Calculate bipower variation of daily stock prices ^AORD

log_stp <- diff(log(stp_tmp))  # Log returns
log_stp <- na.omit(log_stp)

abs_stp <- abs(log_stp)  # Absolute returns
bpv_daily <- (pi / 2) * abs_stp[1:(length(abs_stp) - 1)] * abs_stp[2:length(abs_stp)]   # Daily bipower variation
```

```{r quarterly system}

# Convert variables into quarterly system

library(zoo)
GDP <- aggregate(gdp_tmp, as.yearqtr, function(x) mean(x, na.rm = TRUE))  # real GDP ($ M)
ICR <- aggregate(icr_tmp, as.yearqtr, function(x) mean(x, na.rm = TRUE))  # cash rate target (%)
CPI <- aggregate(cpi_tmp, as.yearqtr, function(x) mean(x, na.rm = TRUE)) # consumer price index
EXR <- aggregate(exr_tmp, as.yearqtr, function(x) mean(x, na.rm = TRUE))  # exchange rates (1 AUD/USD)
STP <- aggregate(stp_tmp, as.yearqtr, function(x) mean(x, na.rm = TRUE))  # stock prices (AUD)

quarters <- xts::endpoints(bpv_daily, on = "quarters")
VOL <- xts::period.apply(bpv_daily, INDEX = quarters, FUN = sum)
VOL <- log(VOL)
index(VOL) <- as.yearqtr(index(VOL), format = "%Y Q%q")  # stock price volatility
```
GDP, interest rates, consumer price index, exchange rates, stock prices and stock price volatility are plotted in [<span style="color: #696969;">Figure 1](#figure1). GDP exhibits an upward trend except for a trough during COVID-19. Interest rates depict a gradual downward trend; however, from 2022 Q4, there has been a significant increase in interest rates. There is an overall upward trend of stock prices, however, with the exception during the Global Financial Crisis where the stock prices has shown great volatility by increasing and decreasing in large amount. 

```{r time series plots, fig.width=6.5, fig.height=6}
library(ggplot2)
library(gridExtra)

plotGDP <- ggplot2::ggplot(data = GDP, aes(x = time(GDP), y = as.vector(GDP))) +
  geom_line(color = "darkblue", linewidth = 0.5) + 
  scale_y_continuous() + 
  labs(title = "GDP ($ billion AUD)",
       x = "",
       y = "") +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5), 
        axis.text.x = element_text(angle = 45, hjust = 1))

plotICR <- ggplot2::ggplot(data = ICR, aes(x = time(ICR), y = as.vector(ICR))) +
  geom_line(color = "darkblue", linewidth = 0.5) + 
  geom_hline(yintercept = 0, linetype = "solid", color = "darkgrey", linewidth = 0.5) +
  scale_y_continuous() + 
  labs(title = "Interest rates (%)",
       x = "",
       y = "") +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5), 
        axis.text.x = element_text(angle = 45, hjust = 1))

plotCPI <- ggplot2::ggplot(data = CPI, aes(x = time(CPI), y = as.vector(CPI))) +
  geom_line(color = "darkblue", linewidth = 0.5) + 
  scale_y_continuous() + 
  labs(title = "Consumer price index",
       x = "",
       y = "") +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5), 
        axis.text.x = element_text(angle = 45, hjust = 1))

plotEXR <- ggplot2::ggplot(data = EXR, aes(x = time(EXR), y = as.vector(EXR))) +
  geom_line(color = "darkblue", linewidth = 0.5) + 
  geom_hline(yintercept = 1, linetype = "solid", color = "darkgrey", linewidth = 0.5) +
  scale_y_continuous() + 
  labs(title = "Exchange rates (AUD/USD)",
       x = "",
       y = "") +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5), 
        axis.text.x = element_text(angle = 45, hjust = 1))

plotSTP <- ggplot2::ggplot(data = STP, aes(x = time(STP), y = as.vector(STP))) +
  geom_line(color = "darkblue", linewidth = 0.5) + 
  scale_y_continuous() + 
  labs(title = "Stock prices ($ AUD)",
       x = "",
       y = "") +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5), 
        axis.text.x = element_text(angle = 45, hjust = 1))

plotVOL <- ggplot2::ggplot(data = VOL, aes(x = time(VOL), y = as.vector(VOL))) +
  geom_line(color = "darkblue", linewidth = 0.5) + 
  scale_y_continuous() + 
  labs(title = "Stock price volatility",
       x = "",
       y = "") +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5), 
        axis.text.x = element_text(angle = 45, hjust = 1))

grid.arrange(plotGDP, plotICR, plotCPI, plotEXR, plotSTP, plotVOL, nrow = 3, ncol = 2)
```
<div id="figure1" style="text-align: center; color: #696969;">
###### Figure 1: Time series plots of the variables
</div>

[<span style="color: #696969;">Table 2](#table2) demonstrates the descriptive statistics of the variables from 1990 Q1 to 2023 Q4.
```{r descriptive statistics}

# Original dataset
original_variables <- merge(GDP, ICR, CPI, EXR, STP, VOL)
colnames(original_variables) <- c("GDP", "Interest rates", "Consumer price index", "Exchange rates", "Stock prices", "Stock price volatility")

# Summary statistics
summary_stats <- sapply(original_variables, function(x) {
  c(Mean = mean(x, na.rm = TRUE),
    SD = sd(x, na.rm = TRUE),
    Min = min(x, na.rm = TRUE),
    Max = max(x, na.rm = TRUE),
    n = sum(!is.na(x)))
})

units <- c("GDP"="$ billion AUD ", "Interest rates"="Percentage", "Consumer price index"="Index", 
           "Exchange rates"="$ USD", "Stock prices"="$ AUD", "Stock price volatility"=" ")

summary_df <- as.data.frame(t(summary_stats))
summary_df$Variable <- rownames(summary_df)
summary_df$Unit <- units[summary_df$Variable]
summary_df <- summary_df[, c("Variable", "Unit", "Mean", "SD", "Min", "Max", "n")]
rownames(summary_df) <- NULL

knitr::kable(summary_df, digits = 3)
```
<div id="table2" style="text-align: center; color: #696969;">
###### Table 2: Summary of descriptive statistics
</div>

In our model, GDP, consumer price index, stock prices are transformed into a logarithmic scale. Stock price volatility is the log of bipower variation.
```{r log scale}
logGDP = log(GDP)
logCPI = log(CPI)
logSTP = log(STP)
```

```{r}
# Final dataset
variables <- merge(logGDP, ICR, logCPI, EXR, logSTP, VOL)
colnames(variables) <- c("GDP", "Interest rates", "Consumer price index", "Exchange rates", "Stock prices", "Stock price volatility")
```
[<span style="color: #696969;">Figure 2](#figure2) shows
```{r log difference plot,  fig.width=6.5, fig.height=6}
plotlogGDP <- ggplot2::ggplot(data = logGDP, aes(x = time(logGDP), y = as.vector(logGDP))) +
  geom_line(color = "darkblue", linewidth = 0.5) + 
  labs(title = "GDP",
       x = "",
       y = "") +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5), 
        axis.text.x = element_text(angle = 45, hjust = 1))

plotICR <- ggplot2::ggplot(data = ICR, aes(x = time(ICR), y = as.vector(ICR))) +
  geom_line(color = "darkblue", linewidth = 0.5) + 
  geom_hline(yintercept = 0, linetype = "solid", color = "darkgrey", linewidth = 0.5) +
  labs(title = "Interest rates (%)",
       x = "",
       y = "") +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5), 
        axis.text.x = element_text(angle = 45, hjust = 1))

plotlogCPI <- ggplot2::ggplot(data = logCPI, aes(x = time(logCPI), y = as.vector(logCPI))) +
  geom_line(color = "darkblue", linewidth = 0.5) + 
  labs(title = "Consumer price index",
       x = "",
       y = "") +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5), 
        axis.text.x = element_text(angle = 45, hjust = 1))

plotEXR <- ggplot2::ggplot(data = EXR, aes(x = time(EXR), y = as.vector(EXR))) +
  geom_line(color = "darkblue", linewidth = 0.5) + 
  geom_hline(yintercept = 1, linetype = "solid", color = "darkgrey", linewidth = 0.5) +
  labs(title = "Exchange rates (AUD/USD)",
       x = "",
       y = "") +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5), 
        axis.text.x = element_text(angle = 45, hjust = 1))

plotlogSTP <- ggplot2::ggplot(data = logSTP, aes(x = time(logSTP), y = as.vector(logSTP))) +
  geom_line(color = "darkblue", linewidth = 0.5) + 
  labs(title = "Stock prices",
       x = "",
       y = "") +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5), 
        axis.text.x = element_text(angle = 45, hjust = 1))

grid.arrange(plotlogGDP, plotICR, plotlogCPI, plotEXR, plotlogSTP, plotVOL, nrow = 3, ncol = 2)
```
<div id="figure2" style="text-align: center; color: #696969;">
###### Figure 2: Plot for the data in logarithmic scale
</div>


## Diagnostic tests
### Autocorrelation/Partial autocorrelation function plots
The autocorrelation test is used to identify the presence of serial correlation between a variable's current value and its lagged value, indicating that past values influence the current value. 

The autocorrelation function (ACF) plots in [<span style="color: #696969;">Figure 3](#figure3) shows that all the variables except for stock price volatility have non-zero autocorrelation for at least 20 lags, implying that only stock price volatility is a stationary series and the other variables are highly persistent.
```{r ACF, fig.width=6.5, fig.height=6}
library(forecast)
par(mfrow = c(3, 2))
for (i in 1:ncol(variables)) {
  Acf(variables[, i], main = colnames(variables)[i])
}
```
<div id="figure3" style="text-align: center; color: #696969;">
###### Figure 3: Plots of autocorrelation functions
</div>

The partial autocorrelation function (PACF) plots in [<span style="color: #696969;">Figure 4](#figure4) shows that the partial autocorrelation for all the variables are significant at the first lag. The partial autocorrelation for exchange rates is also significant at 2.
```{r PACF, fig.width=6.5, fig.height=6}
par(mfrow = c(3, 2))
for (i in 1:ncol(variables)) {
  Pacf(variables[, i], main = colnames(variables)[i])
}
```
<div id="figure4" style="text-align: center; color: #696969;">
###### Figure 4: Plots of partial autocorrelation functions
</div>


### Unit root test
#### Augmented Dickey-Fuller test

The augmented Dickey-Fuller test of the null hypothesis of unit root nonstationarity was performed to test the presence of the unit root. 

[<span style="color: #696969;">Table 3](#table3) shows that the null hypothesis was not rejected at the 1% significance level for all the variables but not for stock price volatility, implying that all the variables except for stock price volatility are nonstationary series. However, stock price volatility is the log of bipower variation and took logarithmic scale twice, 

```{r ADF on the level}
library(urca)

adf <- as.data.frame(matrix(nrow=ncol(variables), ncol=4, NA))
colnames(adf) <- c("Variable", "Test statistic", "Critical value", "Stationarity")
adf$Variable <- colnames(variables)

for (i in 1: ncol(variables)) {
  adf_test1 <- ur.df(variables[, i], type = "trend", lags = trunc((length(variables[, i]) - 1)^(1/3)), selectlags = "AIC")
  adf_test2 <- ur.df(variables[, i], type = "drift", lags = trunc((length(variables[, i]) - 1)^(1/3)), selectlags = "AIC")
  if (colnames(variables)[i] %in% c("GDP", "Consumer price index", "Stock prices")) {
    test_statistic <- adf_test1@teststat["statistic", "tau3"]
    critical_value_1pct <- adf_test1@cval["tau3", "1pct"]
  } else {
    test_statistic <- adf_test2@teststat["statistic", "tau2"]
    critical_value_1pct <- adf_test2@cval["tau2", "1pct"]
  }
  adf[i, "Test statistic"] <- round(as.numeric(test_statistic), 3)
  adf[i, "Critical value"] <- round(as.numeric(critical_value_1pct), 3)
  adf[i, "Stationarity"] <- ifelse(test_statistic < critical_value_1pct, "Yes", "No") 
}

knitr::kable(adf)
```
<div id="table3" style="text-align: center; color: #696969;">
###### Table 3: Augmented Dickey-Fuller test results
</div>

[<span style="color: #696969;">Table 4](#table4) shows that the Augmented Dickey-Fuller test results on the first difference of the variables. We find that all the variables are unit root stationary at the 1% significance level, and conclude that all the variables are integrated of order one, $I(1)$.

```{r ADF on the first difference}
diff_variables <- diff(variables)

adf_diff <- as.data.frame(matrix(nrow=ncol(diff_variables), ncol=4, NA))
colnames(adf_diff) <- c("Variable", "Test statistic", "Critical value", "Stationarity")
adf_diff$Variable <- colnames(diff_variables)

for (i in 1: ncol(diff_variables)) {
  adf_test1 <- ur.df(diff_variables[, i], type = "drift", lags = trunc((length(variables[, i]) - 1)^(1/3)), selectlags = "AIC")
  adf_test2 <- ur.df(diff_variables[, i], type = "none", lags = trunc((length(variables[, i]) - 1)^(1/3)), selectlags = "AIC")
  if (colnames(diff_variables)[i] %in% c("GDP", "Consumer price index", "Stock prices")) {
    test_statistic <- adf_test1@teststat["statistic", "tau2"]
    critical_value_1pct <- adf_test1@cval["tau2", "1pct"]
  } else {
    test_statistic <- adf_test2@teststat["statistic", "tau1"]
    critical_value_1pct <- adf_test2@cval["tau1", "1pct"]
  }
  adf_diff[i, "Test statistic"] <- round(as.numeric(test_statistic), 3)
  adf_diff[i, "Critical value"] <- round(as.numeric(critical_value_1pct), 3)
  adf_diff[i, "Stationarity"] <- ifelse(test_statistic < critical_value_1pct, "Yes", "No") 
}

knitr::kable(adf_diff)
```
<div id="table4" style="text-align: center; color: #696969;">
###### Table 4: Augmented Dickey-Fuller test results on the first difference
</div>

# Methodology
## Model specification
This study uses a Bayesian Structural vector autoregression (BSVAR) model to measure the dynamic and contemporaneous relationships between variables. The endogenous variables in the model are the following:
$$
Y_t= 
\begin{pmatrix}
   gdp_t
 \\ICR_t
 \\cpi_t
 \\EXP_t
 \\stp_t
 \\vol_t
\end{pmatrix}
$$
$Y_t$ contains six variables ordered as 

|    (1) Real GDP, $gdp_t$, 
|    (2) Interest rates, $ICR_t$, 
|    (3) Consumer price index, $cpi_t$, 
|    (4) Exchange rates from AUD to USD, $EXR_t$, 
|    (5) Stock prices, $stp_t$, and 
|    (6) Stock price volatility, $vol_t$.

### Structural form
The Structural VAR model can be represented as follows:
$$
B_0Y_t = b_0 + \sum_{i=1}^{p} B_iY_{t-i} + u_t
$$
$$
u_t|Y_{t-1} \sim iid(0_N, I_N)
$$
where 

|    $Y_t$ is an $N \times 1$ vector of endogenous variables at time $t$, 
|    $B_0$ is an $N \times N$ matrix capturing contemporaneous relationships between variables,
|    $u_t$ is an $N \times 1$ vector conditionally on $Y_{t-1}$ orthogonal structural shocks,
|    $N$ is the number of endogeneous variables, and $p$ is the lag length.

### Reduced form
The VAR model can be represented as follows:
$$
Y_t = \mu_0 + \sum_{i=1}^{p} A_iY_{t-i} + \epsilon_t
$$
$$
\epsilon_t|Y_{t-1} \sim iid(0_N, \Sigma)
$$
where 

|    $Y_t$ is an $N \times 1$ vector of endogenous variables at time $t$, 
|    $A_i$ is an $N \times N$ matrix of autoregressive slope parameters,
|    $\mu_0$ is an $N \times 1$ vector of constant terms,
|    $\epsilon_t$ is an $N \times 1$ vector of white noise error terms,
|    $\Sigma$ is an $N \times N$ covariance matrix of error terms $\epsilon_t$, where $\Sigma = B_0^{-1} {B_0^{-1}}'$,
|    $N$ is the number of endogeneous variables, and $p$ is the lag length.

# Estimation Framework
## Baseline Model Estimation Procedure







## Model Extension: Student's *t*-distributed errors





# Empirical Results
## Baseline Model Estimation


# Conclusion



## References {.unnumbered}

